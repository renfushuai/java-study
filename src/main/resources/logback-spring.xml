<?xml version="1.0" encoding="UTF-8"?>
<!--该日志将日志级别不同的log信息保存到不同的文件中 -->
<configuration>
    <springProperty scope="context" name="LogPath" source="log.path" />
    <springProperty scope="context" name="bootstrapServers" source="bootstrap.servers"/>\
    <property name="springAppName" value="javastudy"/>
    <timestamp key="byDay" datePattern="yyyy-MM-dd" />

    <!-- 日志在工程中的输出位置 -->
    <property name="LOG_FILE" value="${LogPath}" />

    <!-- 控制台的日志输出样式 -->
    <property name="CONSOLE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%X{logId}] ${PID} [%thread] %logger{50} - %msg%n" />

    <!-- 输出成日志文件的样式 -->
    <property name="FILE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%X{logId}] ${PID} [%thread] %logger{64} - %msg" />

    <!-- 控制台输出 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <!--            <level>INFO</level>-->
        </filter>
        <!-- 日志输出编码 -->
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>utf8</charset>
        </encoder>
    </appender>
    <!-- JSON日志 -->
    <appender name="LOG_JSON" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 按天回滚 daily -->
            <fileNamePattern>${LOG_FILE}/logs/%d{yyyy-MM-dd}.txt</fileNamePattern>
            <!-- 日志最大的历史 60天 -->
            <maxHistory>60</maxHistory>
        </rollingPolicy>
        <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
            <providers>
                <pattern>
                    <!-- 尝试后发现LoggingEventCompositeJsonEncoder支持asLong、asJson -->
                    <pattern>
                        {
                        "logTime": "%d{yyyy-MM-dd HH:mm:ss.SSS}",
                        "logType": "%replace(%replace(%replace(%level){'DEBUG','debug'}){'ERROR','error'}){'INFO','info'}",
                        "Status": "#asLong{%X{status:-1}}",
                        "Data": "%X{responseData}",
                        "Code": "#asLong{%X{code:-0}}",
                        "systemName": "${springAppName}",
                        "Msg": "%X{msg}",
                        "subSystemName": "%X{businessType}",
                        "url": "%X{uriPath}",
                        "param": "%X{requestParam}",
                        "appId": "0",
                        "response": "%X{responseBody}",
                        "cost_time": "#asLong{%X{costMillis:-0}}",
                        "thirdApi": {
                        "url": "%X{thirdApi.url}",
                        "param": "%X{thirdApi.param}",
                        "heads": "%X{thirdApi.head}",
                        "methodType": "%X{thirdApi.methodType}",
                        "errorCode": "%X{thirdApi.errorCode}",
                        "errorMsg": "%X{thirdApi.errorMsg}",
                        "cost_time": "#asLong{%X{thirdApi.costTime:-0}}"
                        },
                        "tag": "%X{tag}",
                        "traceInfo": "%X{traceInfo}",
                        "logattr": "#asLong{%X{logAttr:-0}}",
                        "SchoolId": "#asLong{%X{schoolId:-0}}",
                        "BizCode": " ",
                        "Keys": "%X{keys}",
                        "guid": "%X{logId}"
                        }
                    </pattern>
                </pattern>
            </providers>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>


    <!--日志打印的包的范围，及分类日志文件存储 -->
    <logger name="com.rfs" additivity="true" level="INFO">
        <appender-ref ref="LOG_JSON" />
    </logger>
    <logger name="io.lettuce.core.protocol" level="ERROR">
        <appender-ref ref="LOG_JSON" />
    </logger>

    <!-- 日志输出级别 -->
    <root level="INFO">
        <appender-ref ref="CONSOLE" />
    </root>
</configuration>